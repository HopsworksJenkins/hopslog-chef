input {
  beats {
    port => <%= node['logstash']['beats']['serving_port'] %>
  }
}

filter {
  mutate {
    add_field => [ "project", "" ]
  }
  mutate {
    add_field => [ "modelname", "test" ]
  }

  # (EE) Kubernetes serving logs
  if [fields][source] == "kube" {

    # parse json log
    if [message] =~ /^\{.*\}$/ {
      json {
        source => "message"
        target => "log_message" # TODO: remote after testing
        skip_on_invalid_json => true
      }
    }

    # mutate {
    #   add_field => [ "log_message", "message" ]
    # }

    # grok {
    #   match => {"message" => "%{GREEDYDATA:log_message}"}
    # }

    # TODO: Filter and process messages by framework (kubernetes.labels.framework)

  # Local serving logs
  } else if [fields][source] == "local" {

    # Message pattern: Tensorflow
    if [fields][framework] == "tensorflow" {
      mutate {
        add_field => { "[@metadata][message_pattern]" => "%{DATA:servingInfo} (?<templogdate>%{YEAR}-%{MONTHNUM2}-%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND}.%{NONNEGINT}): %{WORD:priority} %{DATA:logger_name}] %{GREEDYDATA:log_message}" }
      }

    # Message pattern: Scikit-learn
    } else if [fields][framework] == "scikit-learn" {
      mutate {
        add_field => { "[@metadata][message_pattern]" => "%{DATA:servingInfo} %{GREEDYDATA:log_message}" }
      }
    } else { 
      # Drop unknown framework
      drop { }
    }

    # Common local logs

    grok {
      match => {"message" => "[@metadata][message_pattern]"}
    }

    # Ignore failed parse enties. Grok filter has been tested with http://grokconstructor.appspot.com
    if "_grokparsefailure" in [tags] {
      drop { }
    }
    date {
      match  => [ "templogdate", ISO8601 ]
      target => "logdate"
    }
    mutate {
      remove_field => [ "[host]" ]
    }
    mutate {
      add_field => {
        "host" => "%{[agent][hostname]}"
      }
    }
    mutate {
      split => ["servingInfo", ","]
    }
    mutate {
      replace => [ "project", "%{[servingInfo][0]}"]
    }
    mutate {
      replace => [ "modelname", "%{[servingInfo][1]}"]
    }
    mutate {
      remove_field => [ "message", "source" , "templogdate", "prospector", "agent", "jobinfo", "log", "input", "ecs"]
    }

  } else { 
    # Drop unknown serving source
    drop { }
  }
}

output {
  elasticsearch {
    hosts => [<%= @elastic_addr %>]
    index => "%{project}_serving-%{+YYYY.MM.dd}"
    <% if node['elastic']['opendistro_security']['enabled'] %>
    user => "<%=node['elastic']['opendistro_security']['logstash']['username']%>"
    password => "<%=node['elastic']['opendistro_security']['logstash']['password']%>"
    <% if node['elastic']['opendistro_security']['https']['enabled'] %>
    cacert => "<%= @hops_ca %>"
    ssl => true
    ilm_enabled => false
    <% end %>
    <% end %>
  }
}
